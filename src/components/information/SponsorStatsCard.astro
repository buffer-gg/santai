---
import type { SponsorStats } from "../../utils/types/wavescan.types";
import ExpandableCard from "./ExpandableCard.astro";

interface Props {
	sponsorStats: { [key: string]: SponsorStats };
}

function capitalizeFirstLetter(word: string) {
	return word.charAt(0).toUpperCase() + word.toLowerCase().slice(1);
}

const { sponsorStats } = Astro.props as Props;

const sponsors = Object.values(sponsorStats)?.sort(
	(a, b) => b.total_rounds_played - a.total_rounds_played,
);
---

<ExpandableCard title="Sponsors" initiallyExpanded={false} class="max-w-[24rem] mx-auto filter drop-shadow-lg">
  <div slot="content" class="space-y-2" id="sponsor-stats">
    {sponsors.map((sponsor, index) => (
      <div class={`sponsor-row flex items-center justify-between py-2 ${index >= 3 ? 'hidden' : ''}`}>
        <div class="flex items-center space-x-3">
          <img src={`/images/sponsor-logos/${capitalizeFirstLetter(sponsor.sponsor_name)}.png`} alt={sponsor.sponsor_name} class="w-10 h-10 rounded-full" />
          <div>
            <h3 class="text-[#f9c61f] font-bold text-sm">{sponsor.sponsor_name}</h3>
            <p class="text-gray-400 text-xs">{sponsor.average_damage_per_round.toFixed(2)} ADR</p>
          </div>
        </div>
        <div class="text-right">
          <p class="text-light-1 text-sm font-medium">{sponsor.total_wins}W - {sponsor.total_losses}L - {sponsor.average_win_percentage.toFixed(0)}%</p>
          <p class="text-gray-400 text-xs">{(sponsor.average_kills_per_round / sponsor.average_deaths_per_round).toFixed(2)} K/D</p>
        </div>
      </div>
    ))}
  </div>
  <div slot="footer">
    <button id="toggle-sponsors" class="w-full text-center text-light-1 py-2 text-sm font-medium">
      Show All
    </button>
  </div>
</ExpandableCard>

<script>
  const toggleButton = document.getElementById('toggle-sponsors');
  const card = toggleButton.closest('.expandable-card');
  const arrow = toggleButton.querySelector('span');
  const sponsorStats = document.getElementById('sponsor-stats');
  const sponsorRows = sponsorStats.querySelectorAll('.sponsor-row');

  function updateVisibility(isExpanded) {
    sponsorRows.forEach((row, index) => {
      if (index < 3 || isExpanded) {
        row.classList.remove('hidden');
      } else {
        row.classList.add('hidden');
      }
    });
  }

  toggleButton.addEventListener('click', () => {
    const isExpanded = card.getAttribute('data-expanded') === 'true';
    const newExpandedState = !isExpanded;
    card.setAttribute('data-expanded', newExpandedState.toString());
    arrow.textContent = newExpandedState ? '▲' : '▼';
    toggleButton.textContent = newExpandedState ? 'Show Less' : 'Show All';
    toggleButton.appendChild(arrow);
    updateVisibility(newExpandedState);
  });

  // Initialize visibility
  updateVisibility(false);
</script>
