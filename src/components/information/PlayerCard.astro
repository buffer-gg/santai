---
import type { PlayerFullProfile } from "../../utils/types/wavescan.types";
import CardChart from "./CardChart";
interface Props {
	player: PlayerFullProfile;
}
const { player }: { player: PlayerFullProfile } = Astro.props;

// Ensure we have valid data for the charts
const santaiRatingChartData = player?.matches?.map(match => ({
  date: match.match_date,
  rank_rating: match.player_team?.players?.find(p => p.id === player.id)?.ranked_rating || 0
})).filter(data => data.rank_rating !== 0).slice(-10).reverse() || [];

const adrChartData = player?.matches?.map(match => ({
  date: match.match_date,
  adr: match.player_team?.players?.find(p => p.id === player.id)?.damage_dealt / match.player_team?.rounds_played || 0
})).filter(data => data.adr !== 0).slice(-10).reverse() || [];

// Function to safely get Santai Rating
function getSantaiRating(rankRating, currentSoloRank) {
  if (typeof rankRating === 'number' && typeof currentSoloRank === 'number') {
    return Math.floor((rankRating + currentSoloRank * 100) / 25);
  }
  return 0;
}

function getRankName(rankId: number): string {
	switch (rankId) {
		case 0:
			return "Unranked";
		case 1:
			return "Bronze 1";
		case 2:
			return "Bronze 2";
		case 3:
			return "Bronze 3";
		case 4:
			return "Bronze 4";
		case 5:
			return "Silver 1";
		case 6:
			return "Silver 2";
		case 7:
			return "Silver 3";
		case 8:
			return "Silver 4";
		case 9:
			return "Gold 1";
		case 10:
			return "Gold 2";
		case 11:
			return "Gold 3";
		case 12:
			return "Gold 4";
		case 13:
			return "Platinum 1";
		case 14:
			return "Platinum 2";
		case 15:
			return "Platinum 3";
		case 16:
			return "Platinum 4";
		case 17:
			return "Emerald 1";
		case 18:
			return "Emerald 2";
		case 19:
			return "Emerald 3";
		case 20:
			return "Emerald 4";
		case 21:
			return "Ruby 1";
		case 22:
			return "Ruby 2";
		case 23:
			return "Ruby 3";
		case 24:
			return "Ruby 4";
		case 25:
			return "Diamond 1";
		case 26:
			return "Diamond 2";
		case 27:
			return "Diamond 3";
		case 28:
			return "Diamond 4";
		case 29:
			return "Champion";
		default:
			return "Unranked";
	}
}
---

<div id="player-card-container" class="container mx-auto max-w-[24rem]"> 
    <div class="bg-[#09090b] rounded-lg overflow-hidden filter drop-shadow-lg">
      <div class="relative">
        <div class="absolute top-2 left-2 flex items-center">
          <span class="text-yellow-400 mr-2"></span>
          <span class="text-sm font-bold uppercase text-[#f9c61f] bg-gradient-to-r from-[#f9c61f] to-[#ffffff] bg-clip-text text-transparent">Santai Champion</span>
        </div>
        <div class="h-64">
          <!-- Player image will go here -->
          <img src={player?.steam_profile?.avatar?.large ? player.steam_profile.avatar.large : "/images/default-avatar.png"} alt={"Player avatar"} class="w-full h-full object-cover" />
          <div class="absolute inset-0 bg-gradient-to-t from-black via-black/70 to-transparent pointer-events-none"></div>
        </div>
        <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-[#09090b] p-4">
          <h1 class="text-5xl text-light-1 font-dharmagothic font-bold mb-1 text-center">{player.name}</h1>
        </div>
      </div>
      
	  <div class="p-4">
		<div class="grid grid-cols-2 gap-4 mb-4">
		  <div class="bg-[#131315] rounded-lg p-3">
			<h6 class="text-[#f9c61f] text-xs uppercase tracking-wider mb-1">Santai Rating</h6>
			<div class="flex items-end justify-between">
			  <h5 class="text-light-2 font-dharmagothic text-2xl font-bold tracking-wide" id="santai-rating">
				{getSantaiRating(player?.stats?.rank_rating, player?.stats?.current_solo_rank)}
			  </h5>
			</div>
			<div class="w-full h-8 mt-2">
			  {santaiRatingChartData.length > 0 && (
				<CardChart chartData={santaiRatingChartData} dataKey="rank_rating" client:load />
			  )}
			</div>
		  </div>
		  <div class="bg-[#131315] rounded-lg p-3">
			<h6 class="text-[#f9c61f] text-xs uppercase tracking-wider mb-1">ADR</h6>
			<div class="flex items-end justify-between">
			  <h5 class="text-light-2 font-dharmagothic text-2xl font-bold tracking-wide">
				{player?.extended_stats?.season_stats['2024-S0']?.average_damage_per_round?.toFixed(1) || "N/A"}
			  </h5>
			</div>
			<div class="w-full h-8 mt-2">
			  {adrChartData.length > 0 && (
				<CardChart chartData={adrChartData} dataKey="adr" client:load />
			  )}
			</div>
		  </div>
		</div>
    </div>
  </div>

  <script>
	const playerCardContainer = document.getElementById('player-card-container');
	function getRankName(rankId: number): string {
	switch (rankId) {
		case 0:
			return "Unranked";
		case 1:
			return "Bronze 1";
		case 2:
			return "Bronze 2";
		case 3:
			return "Bronze 3";
		case 4:
			return "Bronze 4";
		case 5:
			return "Silver 1";
		case 6:
			return "Silver 2";
		case 7:
			return "Silver 3";
		case 8:
			return "Silver 4";
		case 9:
			return "Gold 1";
		case 10:
			return "Gold 2";
		case 11:
			return "Gold 3";
		case 12:
			return "Gold 4";
		case 13:
			return "Platinum 1";
		case 14:
			return "Platinum 2";
		case 15:
			return "Platinum 3";
		case 16:
			return "Platinum 4";
		case 17:
			return "Emerald 1";
		case 18:
			return "Emerald 2";
		case 19:
			return "Emerald 3";
		case 20:
			return "Emerald 4";
		case 21:
			return "Ruby 1";
		case 22:
			return "Ruby 2";
		case 23:
			return "Ruby 3";
		case 24:
			return "Ruby 4";
		case 25:
			return "Diamond 1";
		case 26:
			return "Diamond 2";
		case 27:
			return "Diamond 3";
		case 28:
			return "Diamond 4";
		case 29:
			return "Champion";
		default:
			return "Unranked";
	}
}


	function updatePlayerCard(playerData) {
		// Update relevant parts of the player card
		const santaiRatingElement = playerCardContainer.querySelector('#santai-rating');
		if (santaiRatingElement) {
			santaiRatingElement.textContent = getSantaiRating(playerData.stats.rank_rating, playerData.stats.current_solo_rank).toString();
		} else {
			console.warn("[PlayerCard] No santai-rating element found");
		}

		const adrElement = playerCardContainer.querySelector('#adr');
		if (adrElement) {
			adrElement.textContent = playerData.extended_stats.season_stats['2024-S0'].average_damage_per_round.toFixed(2);
		} else {
			console.warn("[PlayerCard] No adr element found");
		}

		const rankIconElement = playerCardContainer.querySelector('#rank-icon');
		if (rankIconElement) {
			rankIconElement.src = `/images/solo-ranks/${getRankName(playerData.stats.current_solo_rank ?? 0).replace(' ', '-')}.png`;
		} else {
			console.warn("[PlayerCard] No rank-icon element found");
		}

		const rankNameElement = playerCardContainer.querySelector('#rank-name');
		if (rankNameElement) {
			rankNameElement.textContent = `Solo ${getRankName(playerData.stats.current_solo_rank ?? 0)}`;
		} else {
			console.warn("[PlayerCard] No rank-name element found");
		}

		const winPercentageElement = playerCardContainer.querySelector('#win-percentage');
		if (winPercentageElement) {
			winPercentageElement.textContent = playerData.extended_stats.season_stats['2024-S0'].average_win_percentage.toFixed(2);
		} else {
			console.warn("[PlayerCard] No win-percentage element found");
		}

		const kdRatioElement = playerCardContainer.querySelector('#kd-ratio');
		if (kdRatioElement) {
			kdRatioElement.textContent = (playerData.extended_stats.season_stats['2024-S0'].total_kills / playerData.extended_stats.season_stats['2024-S0'].total_deaths).toFixed(2);
		} else {
			console.warn("[PlayerCard] No kd-ratio element found");
		}

		const topDamageElement = playerCardContainer.querySelector('#top-damage');
		if (topDamageElement) {
			topDamageElement.textContent = playerData.extended_stats.season_stats['2024-S0'].top_damage_dealt;
		} else {
			console.warn("[PlayerCard] No top-damage element found");
		}

		const topKillsElement = playerCardContainer.querySelector('#top-kills');
		if (topKillsElement) {
			topKillsElement.textContent = playerData.extended_stats.season_stats['2024-S0'].top_kills;
		} else {
			console.warn("[PlayerCard] No top-kills element found");
		}

		// Trigger chart updates
		window.dispatchEvent(new CustomEvent('updateCharts', { detail: playerData }));
	}

	window.addEventListener('playerDataUpdate', (event) => {
		console.log("[PlayerCard] Player data updated", event);
		updatePlayerCard(event.detail);
	});

	function getSantaiRating(santaiRating: number, rank_id: number): number {
	if (rank_id === 29) {
		return santaiRating - 4650;
	}
		return santaiRating;
	}
  </script>