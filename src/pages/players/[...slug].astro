---
export const prerender = false;
import BackgroundImage from "../../components/cosmetic/BackgroundImage.astro";
import Layout from "../../layouts/Layout.astro";
import PlayerCard from "../../components/information/PlayerCard.astro";
import SponsorStatsCard from "../../components/information/SponsorStatsCard.astro";
import MapStatsCard from "../../components/information/MapStatsCard.astro";
import MatchHistory from "../../components/information/MatchHistory.svelte";
import LoadingSpinner from "../../components/cosmetic/LoadingSpinner.astro";

const { slug } = Astro.params;
const playerId = slug;

let playerFullProfile;
let isLoading = true;
let dump_check: 'IN_PROGRESS' | 'SUCCESS' | 'FAILED' = 'IN_PROGRESS';

try {
	const response = await fetch(
		`https://wavescan-production.up.railway.app/api/v1/player/${playerId}/full_profile`,
	);
	playerFullProfile = await response.json();

 // Dump the player
//  const dump_player_response = await fetch(`https://wavescan-production.up.railway.app/api/v1/player/${playerId}/dump`);
  // const dump_player = await dump_player_response.json();
  // if (!dump_player?.success) {
  //   if (dump_player?.error_code === 'IN_PROGRESS') dump_check = 'IN_PROGRESS';
  //   else dump_check = 'FAILED';
  // } else dump_check = 'SUCCESS';

} catch (error) {
	console.error("Error fetching player data:", error);
} finally {
	isLoading = false;
}
---

<Layout pageTitle={playerFullProfile ? "Santai.GG | " + playerFullProfile.name : "Loading..."}>
  <main class="p-4">
    <BackgroundImage imagePath="/src/assets/background-03.jpg" altText="Spectre Divide - player aiming a revolver." />
    <div class="max-w-screen-xl mx-auto">
      {isLoading ? (
        <div class="flex justify-center items-center h-screen">
          <LoadingSpinner />
        </div>
      ) : (
        <div class="flex flex-col md:flex-row md:space-x-2">
          <div class="md:w-1/4 space-y-4 md:sticky md:top-4 md:self-start">
            <PlayerCard player={playerFullProfile} />
            <SponsorStatsCard sponsorStats={playerFullProfile?.extended_stats?.sponsor_stats || {}} />
            <MapStatsCard mapStats={playerFullProfile?.extended_stats?.map_stats || {}} />
          </div>
          <div class="md:w-3/4 mt-4 md:mt-0">
            <MatchHistory playerFullProfile={playerFullProfile} client:only isLoading={dump_check === 'IN_PROGRESS'} />
          </div>
        </div>
      )}
    </div>
  </main>
</Layout>

<style>
  @media (min-width: 768px) {
    main {
      min-height: 100vh;
    }
  }
</style>
<script is:inline define:vars={{ playerId }}>
  document.addEventListener('DOMContentLoaded', () => {
    console.log("DOMContentLoaded for playerId:", playerId);
    
    // Socket.IO initialization
    const socket = io('http://localhost:3004', {
      query: { playerId }
    });

    socket.on('connect', () => {
      console.log('Socket.IO connection established');
    });

    socket.on('disconnect', () => {
      console.log('Socket.IO disconnected');
    });

    // Generic event handler
    socket.onAny((eventName, ...args) => {
      window.dispatchEvent(new CustomEvent('socketMessage', { 
        detail: { event: eventName, data: args[0] }
      }));
    });

    socket.on('new_match_info', (updatedPlayerFullProfile) => {
      console.log('Received new match info:', updatedPlayerFullProfile);
      window.dispatchEvent(new CustomEvent('playerDataUpdate', { detail: updatedPlayerFullProfile }));
    });

    // Make socket available globally
    window.emitSocketEvent = (eventName, data) => {
      if (socket.connected) {
        console.log("Emitting socket event:", eventName, data);
        socket.emit(eventName, data);
      } else {
        console.error('Socket is not connected');
      }
    };
  });
</script>

<!-- Include Socket.IO client library -->
<script is:inline src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>